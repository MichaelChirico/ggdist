% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_lineribbon.R
\name{geom_lineribbon}
\alias{geom_lineribbon}
\title{Line + multiple-ribbon plots (ggplot geom)}
\usage{
geom_lineribbon(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  step = FALSE,
  orientation = NA,
  blend = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed to \code{\link[=layer]{layer()}}. These are often aesthetics, used to set an aesthetic
to a fixed value, like \code{colour = "red"} or \code{size = 3} (see \strong{Aesthetics}, below). They may also be
parameters to the paired geom/stat.}

\item{step}{Should the line/ribbon be drawn as a step function? One of:
\itemize{
\item \code{FALSE} (default): do not draw as a step function.
\item \code{"mid"} (or \code{TRUE}): draw steps midway between adjacent x values.
\item \code{"hv"}: draw horizontal-then-vertical steps.
\item \code{"vh"}: draw as vertical-then-horizontal steps.
}
\code{TRUE} is an alias for \code{"mid"} because for a step function with ribbons, \code{"mid"} is probably what you want
(for the other two step approaches the ribbons at either the very first or very last x value will not be
visible).}

\item{orientation}{Whether this geom is drawn horizontally or vertically. One of:
\itemize{
\item \code{NA} (default): automatically detect the orientation based on how the aesthetics
are assigned. Automatic detection works most of the time.
\item \code{"horizontal"} (or \code{"y"}): draw horizontally, using the \code{y} aesthetic to identify different
groups. For each group, uses the \code{x}, \code{xmin}, \code{xmax}, and \code{thickness} aesthetics to
draw points, intervals, and slabs.
\item \code{"vertical"} (or \code{"x"}): draw vertically, using the \code{x} aesthetic to identify different
groups. For each group, uses the \code{y}, \code{ymin}, \code{ymax}, and \code{thickness} aesthetics to
draw points, intervals, and slabs.
}
For compatibility with the base ggplot naming scheme for \code{orientation}, \code{"x"} can be used as an alias
for \code{"vertical"} and \code{"y"} as an alias for \code{"horizontal"} (tidybayes had an \code{orientation} parameter
before base ggplot did, hence the discrepancy).}

\item{blend}{Blend mode to use when drawing. Requires R > 4.2 and a graphics device that supports compositing
(see the \code{compositing} element of \code{dev.capabilities()}). Can be one of:
\itemize{
\item \code{NULL} (default): do not use blend modes for drawing. Ribbons will be interleaved,
which improves appearances when drawing ribbons with \code{alpha} < 1.
\item a string: a blend mode supported by the current graphics device; use \code{dev.capabilities()$compositing}
to get a list of supported modes. The \code{"multiply"} mode is particularly useful when drawing multiple
overlapping lineribbons, because its output does not depend on the order that objects are drawn.
When a blend mode is provided, ribbons and lines with the same value of the \code{blend_group} aesthetic
are drawn together and then blended with other blend groups using the specified blend mode.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with a warning. If \code{TRUE}, missing
values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\value{
A \link[ggplot2:ggplot2-ggproto]{ggplot2::Geom} representing a combined line + multiple-ribbon geometry which can
be added to a \code{\link[=ggplot]{ggplot()}} object.
}
\description{
A combination of \code{\link[=geom_line]{geom_line()}} and \code{\link[=geom_ribbon]{geom_ribbon()}} with default aesthetics
designed for use with output from \code{\link[=point_interval]{point_interval()}}.
}
\details{
\code{\link[=geom_lineribbon]{geom_lineribbon()}} is a combination of a \code{\link[=geom_line]{geom_line()}} and \code{\link[=geom_ribbon]{geom_ribbon()}} designed for use
with output from \code{\link[=point_interval]{point_interval()}}. This geom sets some default aesthetics equal to the \code{.width}
column generated by the \code{\link[=point_interval]{point_interval()}} family of functions, making them
often more convenient than a vanilla \code{\link[=geom_ribbon]{geom_ribbon()}} + \code{\link[=geom_line]{geom_line()}}.

Specifically, \code{\link[=geom_lineribbon]{geom_lineribbon()}} acts as if its default aesthetics are
\code{aes(fill = forcats::fct_rev(ordered(.width)))}.
}
\section{Aesthetics}{

The line+ribbon \code{stat}s and \code{geom}s have a wide variety of aesthetics that control
the appearance of their two sub-geometries: the \strong{line} and the \strong{ribbon}.

\strong{Positional aesthetics}

\itemize{
\item{\code{x}: x position of the geometry}
\item{\code{y}: y position of the geometry}
}

\strong{Ribbon-specific aesthetics}

\itemize{
\item{\code{xmin}: Left edge of the ribbon sub-geometry (if \code{orientation = "horizontal"}).}
\item{\code{xmax}: Right edge of the ribbon sub-geometry (if \code{orientation = "horizontal"}).}
\item{\code{ymin}: Lower edge of the ribbon sub-geometry (if \code{orientation = "vertical"}).}
\item{\code{ymax}: Upper edge of the ribbon sub-geometry (if \code{orientation = "vertical"}).}
}

\strong{Color aesthetics}

\itemize{
\item{\code{colour}: (or \code{color}) The color of the \strong{line} sub-geometry.}
\item{\code{fill}: The fill color of the \strong{ribbon} sub-geometry.}
\item{\code{alpha}: The opacity of the \strong{line} and \strong{ribbon} sub-geometries.}
\item{\code{fill_ramp}: A secondary scale that modifies the \code{fill}
scale to "ramp" to another color. See \code{\link[=scale_fill_ramp]{scale_fill_ramp()}} for examples.}
}

\strong{Line aesthetics}

\itemize{
\item{\code{size}: Width of \strong{line}.}
\item{\code{linetype}: Type of \strong{line} (e.g., \code{"solid"}, \code{"dashed"}, etc)}
}

\strong{Blending aesthetics}

\itemize{
\item{\code{blend_group}: Group to use for blending with the \code{blend} parameter. Ribbons and lines
with the same value of \code{blend_group} are drawn together and then blended with other
blend groups using the blend mode specified by \code{blend}. If the \code{blend} parameter is
set but the \code{blend_group} aesthetic is not, all ribbons and lines are drawn separately
and then blended together.}
}

\strong{Other aesthetics} (these work as in standard \code{geom}s)

\itemize{
\item{\code{group}}
}

See examples of some of these aesthetics in action in \code{vignette("lineribbon")}.
Learn more about the sub-geom override aesthetics (like \code{interval_color}) in the
\link[ggdist]{scales} documentation. Learn more about basic ggplot aesthetics in
\code{vignette("ggplot2-specs")}.
}

\examples{

library(dplyr)
library(ggplot2)

theme_set(theme_ggdist())

tibble(x = 1:10) \%>\%
  group_by_all() \%>\%
  do(tibble(y = rnorm(100, .$x))) \%>\%
  median_qi(.width = c(.5, .8, .95)) \%>\%
  ggplot(aes(x = x, y = y, ymin = .lower, ymax = .upper)) +
  # automatically uses aes(fill = forcats::fct_rev(ordered(.width)))
  geom_lineribbon() +
  scale_fill_brewer()

}
\seealso{
See \code{\link[=stat_lineribbon]{stat_lineribbon()}} for a version that does summarizing of samples into points and intervals
within ggplot. See \code{\link[=geom_pointinterval]{geom_pointinterval()}} for a similar geom intended
for point summaries and intervals. See \code{\link[=geom_ribbon]{geom_ribbon()}} and \code{\link[=geom_line]{geom_line()}} for the geoms this is
based on.
}
\author{
Matthew Kay
}
