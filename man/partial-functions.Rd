% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partial.R
\name{partial-functions}
\alias{partial-functions}
\title{Partial function application in ggdist}
\description{
Several \pkg{ggdist} functions support \emph{partial application}: when called,
if their first (primary) argument is not provided, the function returns a
modified version of itself that uses the arguments passed to it as defaults.

Functions supporting partial application include:
\itemize{
\item The \code{\link[=point_interval]{point_interval()}} family, such as \code{\link[=median_qi]{median_qi()}}, \code{\link[=mean_qi]{mean_qi()}},
\code{\link[=mode_hdi]{mode_hdi()}}, etc.
\item The \emph{density} family, such as \code{\link[=density_unbounded]{density_unbounded()}}, \code{\link[=density_bounded]{density_bounded()}},
etc.
}

Partial application makes it easier to supply custom parameters to these
functions when using them inside other functions, such as geoms and stats.
}
\examples{

set.seed(1234)
x = rbeta(1000, 4, 4)

# point_interval() without a first argument results in partial application
pi_50 = point_interval(.width = .5)
pi_50

# the partially-applied function remembers its new `.width` argument an
# can be applied to data
pi_50(x)

# it can also be partially-applied again, modifying old argument values or
# setting new ones
pi_50_80_mean = pi_50(.width = c(.5, .8), .point = mean)
pi_50_80_mean

pi_50_80_mean(x)

# partially-applied functions can be useful to supply options to stats
# and geoms...
data.frame(x = x) \%>\%
  ggplot(aes(x)) +
  stat_halfeye(point_interval = point_interval(.width = .9))

# ... although for some options (like .width) it is simpler to supply the
# option directly to the stat, which is passed down to point_interval:
data.frame(x = x) \%>\%
  ggplot(aes(x)) +
  stat_halfeye(.width = .9)

}
