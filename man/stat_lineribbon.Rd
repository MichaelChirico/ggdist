% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_lineribbon.R
\name{stat_lineribbon}
\alias{stat_lineribbon}
\alias{stat_dist_lineribbon}
\title{Line + multiple probability ribbon plots (ggplot stat)}
\usage{
stat_lineribbon(
  mapping = NULL,
  data = NULL,
  geom = "lineribbon",
  position = "identity",
  ...,
  .width = c(0.5, 0.8, 0.95),
  show_slab = FALSE,
  slab_type = "pdf",
  adjust = 1,
  trim = TRUE,
  breaks = "Sturges",
  outline_bars = FALSE,
  point_interval = "median_qi",
  limits = NULL,
  n = 501,
  show_point = TRUE,
  show_interval = TRUE,
  orientation = NA,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

stat_dist_lineribbon(
  mapping = NULL,
  data = NULL,
  geom = "lineribbon",
  position = "identity",
  ...,
  show_slab = FALSE,
  .width = c(0.5, 0.8, 0.95),
  slab_type = "pdf",
  p_limits = c(NA, NA),
  outline_bars = FALSE,
  limits = NULL,
  n = 501,
  point_interval = NULL,
  show_point = TRUE,
  show_interval = TRUE,
  orientation = NA,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{Use to override the default connection between
\code{geom_lineribbon} and \code{stat_lineribbon}.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed to \code{\link[=layer]{layer()}}. They may also be arguments to the paired geom
(e.g., \code{\link[=geom_pointinterval]{geom_pointinterval()}})}

\item{.width}{The \code{.width} argument passed to \code{point_interval}: a vector of probabilities to use
that determine the widths of the resulting intervals. If multiple probabilities are provided,
multiple intervals per group are generated, each with a different probability interval (and
value of the corresponding \code{.width} and \code{level} generated variables).}

\item{show_slab}{Should the slab portion of the geom be drawn?}

\item{slab_type}{The type of slab function to calculate: probability density (or mass) function (\code{"pdf"}),
cumulative distribution function (\code{"cdf"}), complementary CDF (\code{"ccdf"}), or histogram (\code{"histogram"}.}

\item{adjust}{If \code{slab_type} is \code{"pdf"}, bandwidth for the density estimator is adjusted by multiplying it
by this value. See \code{\link[=density]{density()}} for more information.}

\item{trim}{If \code{slab_type} is \code{"pdf"}, should the density estimate be trimmed to the range of the
input data? Default \code{TRUE}.}

\item{breaks}{If \code{slab_type} is \code{"histogram"}, the \code{breaks} parameter that is passed to
\code{\link[=hist]{hist()}} to determine where to put breaks in the histogram.}

\item{outline_bars}{If \code{slab_type} is \code{"histogram"}, \code{outline_bars} determines if outlines in between
the bars are drawn when the \code{slab_color} aesthetic is used. If \code{FALSE} (the default), the outline
is drawn only along the tops of the bars; if \code{TRUE}, outlines in between bars are also drawn.}

\item{point_interval}{A function from the \code{\link[=point_interval]{point_interval()}} family (e.g., \code{median_qi},
\code{mean_qi}, etc). This function should take in a vector of values, and should obey the
\code{.width} and \code{.simple_names} parameters of \code{\link[=point_interval]{point_interval()}} functions, such that when given
a vector with \code{.simple_names = TRUE} it should return a data frame with variables \code{.value}, \code{.lower},
\code{.upper}, and \code{.width}. Output will be converted to the appropriate \code{x}- or \code{y}-based aesthetics
depending on the value of \code{orientation}. See the \code{\link[=point_interval]{point_interval()}} family of functions for
more information.}

\item{limits}{Manually-specified limits for the slab, as a vector of length two. These limits are combined with those
computed automatically for the slab as well as the limits defined by the scales of the plot to determine the
limits used to draw the slab functions: these limits specify the maximal limits; i.e., if specified, the limits
will not be wider than these (but may be narrower). Use \code{NA} to leave a limit alone; e.g.
\code{limits = c(0, NA)} will ensure that the lower limit does not go below 0.}

\item{n}{Number of points at which to evaluate the function that defines the slab.}

\item{show_point}{Should the point portion of the geom be drawn?}

\item{show_interval}{Should the interval portion of the geom be drawn?}

\item{orientation}{Whether this geom is drawn horizontally (\code{"horizontal"}) or
vertically (\code{"vertical"}). The default, \code{NA}, automatically detects the orientation based on how the
aesthetics are assigned, and should generally do an okay job at this. When horizontal (resp. vertical),
the geom uses the \code{y} (resp. \code{x}) aesthetic to identify different groups, then for each group uses
the \code{x} (resp. \code{y}) aesthetic and the \code{thickness} aesthetic to draw a function as an slab, and draws
points and intervals horizontally (resp. vertically) using the \code{xmin}, \code{x}, and \code{xmax} (resp.
\code{ymin}, \code{y}, and \code{ymax}) aesthetics. For compatibility with the base
ggplot naming scheme for \code{orientation}, \code{"x"} can be used as an alias for \code{"vertical"} and \code{"y"} as an alias for
\code{"horizontal"} (tidybayes had an \code{orientation} parameter before ggplot did, and I think the tidybayes naming
scheme is more intuitive: \code{"x"} and \code{"y"} are not orientations and their mapping to orientations is, in my
opinion, backwards; but the base ggplot naming scheme is allowed for compatibility).}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with a warning. If \code{TRUE}, missing
values are silently removed.}

\item{show.legend}{Should this layer be included in the legends? \code{NA}, the default, includes if any aesthetics
are mapped. \code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\value{
A \link[ggplot2:ggplot2-ggproto]{ggplot2::Stat} representing a combined line+uncertainty ribbon geometry which can
be added to a \code{\link[=ggplot]{ggplot()}} object.
}
\description{
A combination of \code{\link[=stat_slabinterval]{stat_slabinterval()}} and \code{\link[=geom_lineribbon]{geom_lineribbon()}} with sensible defaults.
While \code{geom_lineribbon} is intended for use on data frames that have already been summarized using
a \code{\link[=point_interval]{point_interval()}} function, \code{stat_lineribbon} is intended for use directly on data
frames of draws, and will perform the summarization using a \code{\link[=point_interval]{point_interval()}} function;
\code{stat_dist_lineribbon} is intended for use on analytical distributions through the \code{dist},
\code{arg1}, ... \code{arg9}, and \code{args} aesthetics.
}
\examples{

library(dplyr)
library(ggplot2)
library(distributional)

tibble(x = 1:10) \%>\%
  group_by_all() \%>\%
  do(tibble(y = rnorm(100, .$x))) \%>\%
  ggplot(aes(x = x, y = y)) +
  stat_lineribbon() +
  scale_fill_brewer()

tibble(
  x = 1:10,
  sd = seq(1, 3, length.out = 10)
) \%>\%
  ggplot(aes(x = x, dist = dist_normal(x, sd))) +
  stat_dist_lineribbon() +
  scale_fill_brewer()

}
\seealso{
See \code{\link[=geom_lineribbon]{geom_lineribbon()}} for the geom version, intended for use on points and intervals that have
already been summarized using a \code{\link[=point_interval]{point_interval()}} function. See \code{\link[=stat_pointinterval]{stat_pointinterval()}}
for a similar stat intended for point summaries and intervals.
}
